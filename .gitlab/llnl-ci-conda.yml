variables:
  CONDA_WORK_DIR: ${SDK_WORK_DIR}/conda
  CONDA_REQUIREMENTS: .gitlab/conda-requirements.yml
  RADICAL_PILOT_DBURL: ${MONGODB_CONNECTION_STRING}?tlsAllowInvalidCertificates=true

stages:
  - setup
  - build
  - test
  - cleanup

.on-quartz:
  variables:
    HOST: "quartz"
    CONDA_ENV_NAME: "quartz-env"
    CONDA_ARCH: "x86_64"

.on-ruby:
  variables:
    HOST: "ruby"
    CONDA_ENV_NAME: "ruby-env"
    CONDA_ARCH: "x86_64"

.job-tags:
  tags:
    - $HOST
    - $RUNNER_TYPE

.final_steps:
  script: &finalize
    - chgrp -fR exaworks ${CONDA_WORK_DIR} || true
    - chmod -fR 02770 ${CONDA_WORK_DIR}    || true

.conda-setup:
  stage: setup
  script:
    - echo ${SDK_WORK_DIR}
    - echo ${CONDA_WORK_DIR}
    - mkdir -p ${CONDA_WORK_DIR}
    - test -d ${CONDA_WORK_DIR}/miniconda3-${CONDA_ARCH} && exit 0
    - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-${CONDA_ARCH}.sh -O ${CONDA_WORK_DIR}/miniconda-${CONDA_ARCH}.sh
    - chmod +x ${CONDA_WORK_DIR}/miniconda-${CONDA_ARCH}.sh
    - ${CONDA_WORK_DIR}/miniconda-${CONDA_ARCH}.sh -b -p ${CONDA_WORK_DIR}/miniconda3-${CONDA_ARCH}

.conda-env-setup:
  stage: setup
  script:
    - echo ${CONDA_WORK_DIR}/${CONDA_ENV_NAME}
    - test -d ${CONDA_WORK_DIR}/${CONDA_ENV_NAME} && exit 0
    - source ${CONDA_WORK_DIR}/miniconda3-${CONDA_ARCH}/etc/profile.d/conda.sh
    - eval "$(conda shell.posix hook)"
    - conda update -y -n base -c defaults conda
    - conda create --prefix ${CONDA_WORK_DIR}/${CONDA_ENV_NAME} -y

.conda-build:
  stage: build
  script:
    - source ${CONDA_WORK_DIR}/miniconda3-${CONDA_ARCH}/etc/profile.d/conda.sh
    - eval "$(conda shell.posix hook)"
    - conda activate ${CONDA_WORK_DIR}/${CONDA_ENV_NAME}
    - conda env update --file ${CONDA_REQUIREMENTS}
    - conda update -y --all

.conda-tests:
  stage: test
  script:
    - source ${CONDA_WORK_DIR}/miniconda3-${CONDA_ARCH}/etc/profile.d/conda.sh
    - eval "$(conda shell.posix hook)"
    - conda activate ${CONDA_WORK_DIR}/${CONDA_ENV_NAME}
    - export run_id=${CI_PIPELINE_ID}
    - export branch=${CI_COMMIT_BRANCH}
    - export url=${TESTING_HOST}
    - export test="Conda"
    - export location="llnl-$HOST"
    - export contact="arambula2@llnl.gov"
    - export imnumber="LLNL-MI-834241"
    - python3 ci/tests/test.py -s
    - for TEST in flux parsl rp parsl-flux rp-flux; do
        python3 ci/tests/test.py -n $TEST -c "bash ci/tests/${TEST}/test.sh";
      done
    - python3 ci/tests/test.py -e

.conda-env-cleanup:
  stage: cleanup
  script:
    - *finalize



conda-setup-quartz:
  variables:
    RUNNER_TYPE: "shell"
  extends: [.on-quartz, .job-tags, .conda-setup]

conda-env-setup-quartz:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-setup-quartz" ]
  extends: [.on-quartz, .job-tags, .conda-env-setup]

conda-build-quartz:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-env-setup-quartz" ]
  extends: [.on-quartz, .job-tags, .conda-build]

conda-tests-quartz:
  variables:
    RUNNER_TYPE: "batch"
    LLNL_SLURM_SCHEDULER_PARAMETERS: "--nodes=1 -t 60"
  needs: [ "conda-build-quartz" ]
  extends: [.on-quartz, .job-tags, .conda-tests]

conda-setup-cleanup-quartz:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-setup-quartz" ]
  when: on_failure
  extends: [.on-quartz, .job-tags, .conda-env-cleanup]

conda-env-setup-cleanup-quartz:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-env-setup-quartz" ]
  when: on_failure
  extends: [.on-quartz, .job-tags, .conda-env-cleanup]

conda-build-cleanup-quartz:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-build-quartz" ]
  when: on_failure
  extends: [.on-quartz, .job-tags, .conda-env-cleanup]

conda-tests-cleanup-quartz:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-tests-quartz" ]
  when: always
  extends: [.on-quartz, .job-tags, .conda-env-cleanup]





conda-setup-ruby:
  variables:
    RUNNER_TYPE: "shell"
  extends: [.on-ruby, .job-tags, .conda-setup]

conda-env-setup-ruby:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-setup-ruby" ]
  extends: [.on-ruby, .job-tags, .conda-env-setup]

conda-build-ruby:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-env-setup-ruby" ]
  extends: [.on-ruby, .job-tags, .conda-build]

conda-tests-ruby:
  variables:
    RUNNER_TYPE: "batch"
    LLNL_SLURM_SCHEDULER_PARAMETERS: "--nodes=1 -t 60"
  needs: [ "conda-build-ruby" ]
  extends: [.on-ruby, .job-tags, .conda-tests]

conda-setup-cleanup-ruby:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-setup-ruby" ]
  when: on_failure
  extends: [.on-ruby, .job-tags, .conda-env-cleanup]

conda-env-setup-cleanup-ruby:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-env-setup-ruby" ]
  when: on_failure
  extends: [.on-ruby, .job-tags, .conda-env-cleanup]

conda-build-cleanup-ruby:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-build-ruby" ]
  when: on_failure
  extends: [.on-ruby, .job-tags, .conda-env-cleanup]

conda-tests-cleanup-ruby:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ "conda-tests-ruby" ]
  when: always
  extends: [.on-ruby, .job-tags, .conda-env-cleanup]
