variables:
  SPACK_WORK_DIR: ${SDK_WORK_DIR}/spack
  RADICAL_PILOT_DBURL: ${MONGODB_CONNECTION_STRING}?tlsAllowInvalidCertificates=true


stages:
  - setup
  - build
  - test
  - cleanup


### MACHINES
.on_quartz:
  variables:
    HOST: "quartz"
    SPACK_ENV_NAME: "rhel7-broadwell"
    COMPILER: "gcc@8.1.0"
    TARGET_ARCH_OPT: "target=x86_64"

.on_ruby:
  variables:
    HOST: "ruby"
    SPACK_ENV_NAME: "rhel7-cascadelake"
    COMPILER: "gcc@8.2.0"
    TARGET_ARCH_OPT: ""

.on_lassen:
  variables:
    HOST: "lassen"
    SPACK_ENV_NAME: "rhel7-ppc64le"
    COMPILER: "gcc@9.4.0"
    TARGET_ARCH_OPT: "target=ppc64le"


### SCRIPTS
.final_steps:
  script: &finalize
    - chgrp -fR exaworks ${SPACK_WORK_DIR} || true
    - chmod -fR 02770 ${SPACK_WORK_DIR}    || true

.job_tags:
  tags:
    - $HOST
    - $RUNNER_TYPE

.spack_env_setup:
  stage: setup
  script:
    - . ${SPACK_WORK_DIR}/share/spack/setup-env.sh
    - test "$(spack env list | grep $SPACK_ENV_NAME)" && exit 0
    - spack env create ${SPACK_ENV_NAME}
    - for i in {1..3}; do
        spack env activate ${SPACK_ENV_NAME} && break || sleep 5;
      done
    - spack config add concretizer:unify:true
    - spack config add concretizer:reuse:false
    - spack config add config:db_lock_timeout:300
    - spack compiler find
    - spack add ${COMPILER} ${TARGET_ARCH_OPT}
    - spack install || (spack env deactivate && spack env remove ${SPACK_ENV_NAME} -y && exit 1)
    - spack compiler add $(spack location -i $COMPILER)
    - *finalize

.spack_build:
  stage: build
  script:
    - . ${SPACK_WORK_DIR}/share/spack/setup-env.sh
    - for i in {1..3}; do
        spack env activate ${SPACK_ENV_NAME} && break || sleep 5;
      done
    - spack uninstall -y exaworks%${COMPILER} py-pytest%${COMPILER} || true
    - spack add exaworks%${COMPILER} ^python@3.9 py-pytest%${COMPILER}
    - spack concretize -f
    - spack install
    - *finalize

.spack_test:
  stage: test
  script:
    - . ${SPACK_WORK_DIR}/share/spack/setup-env.sh
    - for i in {1..3}; do
        spack env activate ${SPACK_ENV_NAME} && break || sleep 5;
      done
    - spack load exaworks py-pytest
    - export run_id=${CI_PIPELINE_ID}
    - export branch=${CI_COMMIT_BRANCH}
    - export url=${TESTING_HOST}
    - export test="Spack"
    - export location="llnl-$HOST"
    - export contact="arambula2@llnl.gov"
    - export imnumber="LLNL-MI-834241"
    - python3 ci/tests/test.py -s
    - for TEST in flux parsl rp swift-t parsl-flux rp-flux; do
        python3 ci/tests/test.py -n $TEST -c "bash ci/tests/${TEST}/test.sh";
      done
    - python3 ci/tests/test.py -e

### JOBS

spack_setup:
  stage: setup
  variables:
    RUNNER_TYPE: "shell"
  extends: [ .on_ruby, .job_tags ]
  script:
    - test -d ${SPACK_WORK_DIR} && exit 0
    - git clone -c feature.manyFiles=true -c core.sharedRepository=true https://github.com/spack/spack.git ${SPACK_WORK_DIR}
    - *finalize

spack_update:
  stage: build
  variables:
    RUNNER_TYPE: "shell"
  extends: [ .on_ruby, .job_tags ]
  script:
    - cd ${SPACK_WORK_DIR}
    - git checkout HEAD^ .
    - git reset --hard HEAD
    - git pull --ff
    - *finalize


# QUARTZ
spack_env_setup_quartz:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ spack_setup ]
  extends: [ .on_quartz, .job_tags, .spack_env_setup ]

spack_build_quartz:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ spack_update ]
  extends: [ .on_quartz, .job_tags, .spack_build ]

spack_test_quartz:
  variables:
    RUNNER_TYPE: "batch"
    LLNL_SLURM_SCHEDULER_PARAMETERS: "--nodes=1 -t 30"
  needs: [ spack_build_quartz ]
  extends: [ .on_quartz, .job_tags, .spack_test ]


# RUBY
spack_env_setup_ruby:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ spack_setup ]
  extends: [ .on_ruby, .job_tags, .spack_env_setup ]

spack_build_ruby:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ spack_update ]
  extends: [ .on_ruby, .job_tags, .spack_build ]

spack_test_ruby:
  variables:
    RUNNER_TYPE: "batch"
    LLNL_SLURM_SCHEDULER_PARAMETERS: "--nodes=1 -t 30"
  needs: [ spack_build_ruby ]
  extends: [ .on_ruby, .job_tags, .spack_test ]


# LASSEN
spack_env_setup_lassen:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ spack_setup ]
  extends: [ .on_lassen, .job_tags, .spack_env_setup ]

spack_build_lassen:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ spack_update ]
  extends: [ .on_lassen, .job_tags, .spack_build ]

spack_test_lassen:
  variables:
    RUNNER_TYPE: "batch"
    LLNL_LSF_SCHEDULER_PARAMETERS: "-nnodes 1 -W 30"
    LSB_JOB_STARTER: "ENVIRONMENT=BATCH /usr/tcetmp/bin/bsub_job_starter %USRCMD"
    ENVIRONMENT: "BATCH"
  needs: [ spack_build_lassen ]
  extends: [ .on_lassen, .job_tags, .spack_test ]


# ALWAYS
spack_cleanup:
  stage: cleanup
  when: always
  variables:
    RUNNER_TYPE: "shell"
  extends: [ .on_ruby, .job_tags ]
  script:
    - . ${SPACK_WORK_DIR}/share/spack/setup-env.sh
    - spack clean -a || true
    - rm -rf ${HOME}/.spack/cache
    - spack providers
    - *finalize

