variables:
  PIP_WORK_DIR: ${SDK_WORK_DIR}/pip
  PIP_REQUIREMENTS: .gitlab/pip-requirements.txt
  RADICAL_PILOT_DBURL: ${MONGODB_CONNECTION_STRING}?tlsAllowInvalidCertificates=true


stages:
  - setup
  - build
  - test
  - cleanup


### MACHINES
.on_quartz:
  variables:
    SITE: "quartz"
    VENV_ENV_NAME: "quartz-env"
    PYTHON_MODULE: "python/3.9.12"
    TESTS: flux parsl rp parsl-flux rp-flux maestro smartsim

.on_ruby:
  variables:
    SITE: "ruby"
    VENV_ENV_NAME: "ruby-env"
    PYTHON_MODULE: "python/3.9.12"
    TESTS: flux parsl rp parsl-flux rp-flux maestro smartsim

.on_lassen:
  variables:
    SITE: "lassen"
    VENV_ENV_NAME: "lassen-env"
    PYTHON_MODULE: "python/3.8.2"
    TESTS: flux parsl rp parsl-flux rp-flux maestro 


### SCRIPTS
.final_steps:
  script: &finalize
    - chgrp -fR exaworks ${PIP_WORK_DIR} || true
    - chmod -fR 02770 ${PIP_WORK_DIR}    || true

.job_tags:
  tags:
    - $SITE
    - $RUNNER_TYPE

.pip_env_setup:
  stage: setup
  script:
    - mkdir -p ${PIP_WORK_DIR}
    - test -d ${PIP_WORK_DIR}/${VENV_ENV_NAME} && exit 0
    - module add ${PYTHON_MODULE}
    - python3 -m venv ${PIP_WORK_DIR}/${VENV_ENV_NAME}
    - source ${PIP_WORK_DIR}/${VENV_ENV_NAME}/bin/activate
    - pip install -U pip setuptools wheel
    - pip cache purge
    - *finalize

.pip_build:
  stage: build
  script:
    - source ${PIP_WORK_DIR}/${VENV_ENV_NAME}/bin/activate
    - pip install --no-cache-dir -r ${PIP_REQUIREMENTS}
    - (smart clean && smart build) > /dev/null 2>&1 || true
    - *finalize

.pip_test:
  stage: test
  variables:
    MAINTAINER: "arambula2@llnl.gov"
    IM_NUMBER: "LLNL-MI-834241"
    TESTS_GROUP: "pip"
    SITE_ID: "llnl-$SITE"
  script:
    - source ${PIP_WORK_DIR}/${VENV_ENV_NAME}/bin/activate
    - python3 ci/tests/test.py -s
    - for TEST in ${TESTS}; do
        python3 ci/tests/test.py -n $TEST -c "bash ci/tests/${TEST}/test.sh" --stdout;
      done
    - python3 ci/tests/test.py -e
    - deactivate

### JOBS

# QUARTZ
pip_env_setup_quartz:
  variables:
    RUNNER_TYPE: "shell"
  extends: [ .on_quartz, .job_tags, .pip_env_setup ]

pip_build_quartz:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ pip_env_setup_quartz ]
  extends: [ .on_quartz, .job_tags, .pip_build ]

pip_test_quartz:
  variables:
    RUNNER_TYPE: "batch"
    LLNL_SLURM_SCHEDULER_PARAMETERS: "--nodes=1 -t 45"
  needs: [ pip_build_quartz ]
  extends: [ .on_quartz, .job_tags, .pip_test ]


# RUBY
pip_env_setup_ruby:
  variables:
    RUNNER_TYPE: "shell"
  extends: [ .on_ruby, .job_tags, .pip_env_setup ]

pip_build_ruby:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ pip_env_setup_ruby ]
  extends: [ .on_ruby, .job_tags, .pip_build ]

pip_test_ruby:
  variables:
    RUNNER_TYPE: "batch"
    LLNL_SLURM_SCHEDULER_PARAMETERS: "--nodes=1 -t 45"
  needs: [ pip_build_ruby ]
  extends: [ .on_ruby, .job_tags, .pip_test ]


# LASSEN
pip_env_setup_lassen:
  variables:
    RUNNER_TYPE: "shell"
  extends: [ .on_lassen, .job_tags, .pip_env_setup ]

pip_build_lassen:
  variables:
    RUNNER_TYPE: "shell"
  needs: [ pip_env_setup_lassen ]
  extends: [ .on_lassen, .job_tags, .pip_build ]
  before_script:
    - .gitlab/llnl-lassen-openssl-parsl.sh ${PIP_WORK_DIR}/${VENV_ENV_NAME}

pip_test_lassen:
  variables:
    RUNNER_TYPE: "batch"
    LLNL_LSF_SCHEDULER_PARAMETERS: "-nnodes 1 -W 45"
    LSB_JOB_STARTER: "ENVIRONMENT=BATCH /usr/tcetmp/bin/bsub_job_starter %USRCMD"
    EVIRONMENT: "BATCH"
  needs: [ pip_build_lassen ]
  extends: [ .on_lassen, .job_tags, .pip_test ]


# ALWAYS
pip_cleanup:
  stage: cleanup
  when: always
  variables:
    RUNNER_TYPE: "shell"
  extends: [ .on_quartz, .job_tags ]
  script:
   - *finalize

