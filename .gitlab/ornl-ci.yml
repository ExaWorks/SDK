
stages:
  - setup
  - compile
  - update
  - build
  - test
  - cleanup

.final_steps:
  script: &finalize
    - chgrp -fR csc449 $SPACK_WORK_DIR/spack || true
    - chmod -fR 02770  $SPACK_WORK_DIR/spack || true

spack-setup:
  stage: setup
  tags:
    - ascent
    - nobatch
  script:
    - mkdir -p $SPACK_WORK_DIR
    - test -d $SPACK_WORK_DIR/spack && exit 0
    - git clone -c feature.manyFiles=true -c core.sharedRepository=true https://github.com/spack/spack.git $SPACK_WORK_DIR/spack
    - *finalize

env-setup:
  stage: compile
  needs:
    - job: spack-setup
  parallel:
    matrix:
      - HOST: [ "ascent" ]
        SPACK_ENV_NAME: [ "ascent" ]
  tags:
    - $HOST
    - nobatch
  script:
    - . $SPACK_WORK_DIR/spack/share/spack/setup-env.sh
    - test "$(spack env list | grep $SPACK_ENV_NAME)" && exit 0
    - spack env create $SPACK_ENV_NAME
    - for i in {1..3}; do
        spack env activate $SPACK_ENV_NAME && break || sleep 5;
      done
    - spack config add concretizer:unify:true
    - spack config add concretizer:reuse:false
    - spack config add config:db_lock_timeout:300
    - spack compiler find
  # - spack add $COMPILER %gcc@4.9.3 $TARGET_ARCH_OPT
  # - spack install || (spack env deactivate && spack env remove $SPACK_ENV_NAME -y && exit 1)
  # - spack compiler add $(spack location -i $COMPILER)
    - *finalize

spack-update:
  stage: update
  tags:
    - ascent
    - nobatch
  script:
    - cd $SPACK_WORK_DIR/spack/
    - git checkout HEAD^ .
    - git reset --hard HEAD
    - git pull --ff
    - *finalize

spack-build:
  stage: build
  needs:
    - job: spack-update
  parallel:
    matrix:
      - HOST: [ "ascent" ]
        SPACK_ENV_NAME: [ "ascent" ]
  tags:
    - $HOST
    - nobatch
  script:
    - . $SPACK_WORK_DIR/spack/share/spack/setup-env.sh
    - for i in {1..3}; do
        spack env activate $SPACK_ENV_NAME && break || sleep 5;
      done
    - spack uninstall -y exaworks py-pytest || true
    - spack add exaworks ^python@3.9 py-pytest
    - spack concretize -f
    - spack install
    - *finalize

sdk-test:
  stage: test
  needs:
    - job: spack-build
  before_script:
    - whoami
  parallel:
    matrix:
      - HOST : ["ascent"]
        SPACK_ENV_NAME : ["ascent"]
        SCHEDULER_PARAMETERS: [ "-P CSC449 -nnodes 1 -W 30" ]
  tags:
    - $HOST
    - batch
  script:
    - . $SPACK_WORK_DIR/spack/share/spack/setup-env.sh
    - for i in {1..3}; do
        spack env activate $SPACK_ENV_NAME && break || sleep 5;
      done
    - spack load exaworks py-pytest
    - export run_id=$CI_PIPELINE_ID
    - export branch=$CI_COMMIT_BRANCH
    - export url=$TESTING_HOST
    - export test="Spack"
    - export location="ornl-$HOST"
    - export contact="andre@merzky.net"
    - python3 ci/tests/test.py -s
    - for TEST in flux parsl rp swift-t parsl-flux; do
        python3 ci/tests/test.py -n $TEST -c "bash ci/tests/${TEST}/test.sh";
      done
    - python3 ci/tests/test.py -e
  after_script:
    - whoami

.spack-cleanup: &spack-cleanup
  stage: cleanup
  tags:
    - ascent
    - nobatch
  script:
    - . $SPACK_WORK_DIR/spack/share/spack/setup-env.sh
    - spack clean -a || true
    - rm -rf $HOME/.spack/cache
    - spack providers
    - *finalize

cleanup-on-compile-failure:
  needs: [ "env-setup" ]
  when: on_failure
  <<: *spack-cleanup

cleanup-on-build-failure:
  needs: [ "spack-build" ]
  when: on_failure
  <<: *spack-cleanup

cleanup-on-success:
  when: on_success
  <<: *spack-cleanup

