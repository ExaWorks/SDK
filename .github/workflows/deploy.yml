name: Deploy
on:
  push: { branches: master }

jobs:

  deploy-base:
    name: Deploy docker images
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        dockerbase: ["centos7", "rockylinux8", "ubuntu2004"]
        packagemanager: ["pip"]
        mpi: ["openmpi", "mpich"]
        pyversion: ["3.7", "3.8", "3.9"]

    env:
      DOCKER_TAG: "${{ matrix.dockerbase }}_${{ matrix.packagemanager }}_${{ matrix.mpi }}_${{ matrix.pyversion }}"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push base image (${{ env.DOCKER_TAG }})
      uses: docker/build-push-action@v3
      with:
        context: ./docker/base/
        file: ./docker/base/${{ matrix.dockerbase }}/Dockerfile
        push: true
        build-args: |
          PACKAGE_MANAGER=${{ matrix.packagemanager }}
          PYTHON_VERSION=${{ matrix.pyversion }}
          MPI=${{ matrix.mpi }}
        tags: |
          exaworks/sdk-base:${{ env.DOCKER_TAG }}
        platforms: linux/amd64

    - name: Build and push composite image (${{ env.DOCKER_TAG }})
      run: |
        docker build \
          -t rct:${{ env.DOCKER_TAG }} \
          --build-arg BASE_IMAGE=exaworks/sdk-base:${{ env.DOCKER_TAG }} \
          docker/rct
        docker build \
          -t rct_parsl:${{ env.DOCKER_TAG }} \
          --build-arg BASE_IMAGE=rct:${{ env.DOCKER_TAG }} \
          docker/parsl
        docker build \
          -t rct_parsl_swift:${{ env.DOCKER_TAG }} \
          --build-arg BASE_IMAGE=rct_parsl:${{ env.DOCKER_TAG }} \
          docker/swift-t
        docker build \
          -t rct_parsl_swift_flux:${{ env.DOCKER_TAG }} \
          --build-arg BASE_IMAGE=rct_parsl_swift:${{ env.DOCKER_TAG }} \
          docker/flux
        docker build \
          -t exaworks/sdk:${{ env.DOCKER_TAG }} \
          --build-arg BASE_IMAGE=rct_parsl_swift_flux:${{ env.DOCKER_TAG }} \
          docker/integration
        docker push exaworks/sdk:${{ env.DOCKER_TAG }}

    - name: Push images with 'latest' tag
      if: ${{ matrix.dockerbase == 'centos7' && matrix.packagemanager == 'pip' && matrix.mpi == 'openmpi' && matrix.pyversion == '3.8'}}
      run: |
        docker tag exaworks/sdk-base:${{ env.DOCKER_TAG }} exaworks/sdk-base:latest
        docker push exaworks/sdk-base:latest
        docker tag exaworks/sdk:${{ env.DOCKER_TAG }} exaworks/sdk:latest
        docker push exaworks/sdk:latest

  deploy-tutorials:
    name: Deploy docker image with tutorials
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push image with tutorials
        uses: docker/build-push-action@v3
        with:
          context: ./docs/source/tutorials/
          file: ./docker/tutorials/Dockerfile
          push: true
          tags: exaworks/sdk-tutorials:latest

